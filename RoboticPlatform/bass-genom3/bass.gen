/*/
 * Copyright (c) 2014 LAAS/CNRS
 * All rights reserved.
 *
 * Redistribution  and  use  in  source  and binary  forms,  with  or  without
 * modification, are permitted provided that the following conditions are met:
 *
 *   1. Redistributions of  source  code must retain the  above copyright
 *      notice and this list of conditions.
 *   2. Redistributions in binary form must reproduce the above copyright
 *      notice and  this list of  conditions in the  documentation and/or
 *      other materials provided with the distribution.
 *
 * THE SOFTWARE  IS PROVIDED "AS IS"  AND THE AUTHOR  DISCLAIMS ALL WARRANTIES
 * WITH  REGARD   TO  THIS  SOFTWARE  INCLUDING  ALL   IMPLIED  WARRANTIES  OF
 * MERCHANTABILITY AND  FITNESS.  IN NO EVENT  SHALL THE AUTHOR  BE LIABLE FOR
 * ANY  SPECIAL, DIRECT,  INDIRECT, OR  CONSEQUENTIAL DAMAGES  OR  ANY DAMAGES
 * WHATSOEVER  RESULTING FROM  LOSS OF  USE, DATA  OR PROFITS,  WHETHER  IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR  OTHER TORTIOUS ACTION, ARISING OUT OF OR
 * IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include "bassStruct.idl"
#include "bassInterface.gen"

component bass {
    version         "1.0";
    lang            "c";
    require         "genom3 >= 2.99.24";
    provides        bassInterface;
    codels-require  "alsa >= 1.0.25";

    /* ---IDS declaration--- */
    native captureStruct;
    ids {
        captureStruct  cap;
    };

    /* ---Exceptions declaration--- */
    exception e_nomem, e_nodevice, e_device, e_hwparams, e_swparams;

    /* ---Task declaration--- */
    task capture;

    /* ---Services declaration--- */
    function ListDevices() {
        doc     "Print available devices for sound capture on standard output";

        codel   codelListDevices();
        throw   e_nodevice;
    };

    activity Acquire(
      in string device = "hw:1,0" : "ALSA name of the sound device",
      in unsigned long sampleRate = 44100 : "Sample rate in Hz",
      in unsigned long nFramesPerChunk = 2205 : "Chunk size in frames",
      in unsigned long nChunksOnPort = 20 : "Port size in chunks"
      ) {
        doc     "Acquire data from an audio device and stream it on a port";
        task    capture;
        interrupts  Acquire;

        codel <start>      startAcquire(local in device, local in sampleRate,
                               local in nFramesPerChunk, local in nChunksOnPort,
                               inout ::ids, port out Audio) yield exec, ether;
        async codel <exec> execAcquire(inout ::ids, port out Audio)
                               yield exec, stop;
        codel <stop>       stopAcquire(inout ::ids) yield ether;

        throw   e_nomem, e_device, e_hwparams, e_swparams;
    };

    function Stop() {
        doc         "Stop acquisition of audio data";
        interrupts  Acquire;
    };
};
