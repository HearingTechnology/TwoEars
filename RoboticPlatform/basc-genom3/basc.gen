/*/
 * Copyright (c) 2014 LAAS/CNRS
 * All rights reserved.
 *
 * Redistribution  and  use  in  source  and binary  forms,  with  or  without
 * modification, are permitted provided that the following conditions are met:
 *
 *   1. Redistributions of  source  code must retain the  above copyright
 *      notice and this list of conditions.
 *   2. Redistributions in binary form must reproduce the above copyright
 *      notice and  this list of  conditions in the  documentation and/or
 *      other materials provided with the distribution.
 *
 * THE SOFTWARE  IS PROVIDED "AS IS"  AND THE AUTHOR  DISCLAIMS ALL WARRANTIES
 * WITH  REGARD   TO  THIS  SOFTWARE  INCLUDING  ALL   IMPLIED  WARRANTIES  OF
 * MERCHANTABILITY AND  FITNESS.  IN NO EVENT  SHALL THE AUTHOR  BE LIABLE FOR
 * ANY  SPECIAL, DIRECT,  INDIRECT, OR  CONSEQUENTIAL DAMAGES  OR  ANY DAMAGES
 * WHATSOEVER  RESULTING FROM  LOSS OF  USE, DATA  OR PROFITS,  WHETHER  IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR  OTHER TORTIOUS ACTION, ARISING OUT OF OR
 * IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#pragma require "bass-genom3 >= 1.0"
#include "bass/bassInterface.gen"

component basc {
    version         "1.0";
    lang            "c";
    require         "genom3 >= 2.99.24";
    uses            bassInterface;

    exception e_noData;

    task read {
        period      250ms; //chosen arbitrarily for this example
    };

    activity GetBlocks(
      inout unsigned long nBlocks = 1 : "Amount of blocks, 0 for unlimited",
      in unsigned long nFramesPerBlock = 12000 : "Blocks size in frames",
      in long startOffs = -12000 : "Starting offset (past < 0, future > 0)"
      ) {
        doc         "Get consecutive blocks of audio data from bass";
        task        read;
        interrupts  GetBlocks;

        codel <start>   startGetBlocks(in nFramesPerBlock, in startOffs,
                            port in Audio) yield exec;
        codel <exec>    execGetBlocks(inout nBlocks, in nFramesPerBlock,
                            port in Audio) yield exec, stop;
        codel <stop>    stopGetBlocks() yield ether;

        throw   e_noData;
    };

    function Stop() {
        doc         "Stop getting blocks";
        interrupts  GetBlocks;
    };
};
